---

- name: Gather OS Specific Variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "defaults.yml"
  tags: [always]

# Awkward way to make a different OS default value while still allowing override
- name: Fix Windows default install path
  set_fact:
    te_agent_package_install_path: 'C:\Program Files\Tripwire\TE\Agent'
  when:
  - ansible_os_family == 'Windows'
  - te_agent_package_install_path == '/usr/local/tripwire/te/agent'
  tags: [always]

- include: check_vars.yml
  tags: [always]

- include: win_check_version.yml
  when: ansible_os_family == 'Windows'
  tags: [always]

- include: uninstall.yml
  when:
  - ansible_os_family != 'Windows'
  - te_agent_package_state == 'absent' or
    (te_agent_package_version is defined and ansible_local is defined and ansible_local.te_agent is defined and te_agent_package_version != ansible_local.te_agent.version)
  tags: [package]

- include: win_uninstall.yml
  when:
  - ansible_os_family == 'Windows'
  - te_agent_package_state == 'absent' or
    (te_agent_package_version is defined and te_agent_package_installed_version is defined and te_agent_package_version != te_agent_package_installed_version)
  tags: [package]

- include: install.yml
  when:
  - ansible_os_family != 'Windows'
  - te_agent_package_state == 'present'
  - ansible_local is not defined or ansible_local.te_agent is not defined or
    (te_agent_package_version is defined and te_agent_package_version != ansible_local.te_agent.version)
  tags: [package]

- include: win_install.yml
  when:
  - ansible_os_family == 'Windows'
  - te_agent_package_state == 'present'
  - te_agent_package_installed_version is not defined or
    (te_agent_package_version is defined and te_agent_package_version != te_agent_package_installed_version)
  tags: [package]

- include: config.yml
  when: ansible_os_family != 'Windows'
  tags: [configure]

- include: win_config.yml
  when: ansible_os_family == 'Windows'
  tags: [configure]

- include: service.yml
  when: ansible_os_family != 'Windows'
  tags: [service]

- include: win_service.yml
  when: ansible_os_family == 'Windows'
  tags: [service]
